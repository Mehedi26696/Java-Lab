
Collection
├── List
│   ├── AbstractList
│   │   ├── AbstractSequentialList
│   │   │   ├── LinkedList
│   │   ├── ArrayList
├── Queue
│   ├── AbstractQueue
│   │   ├── PriorityQueue
│   ├── Deque
│   │   ├── AbstractDeque
├── Set
│   ├── AbstractSet
│   │   ├── HashSet
│   │   │   ├── LinkedHashSet
│   │   ├── EnumSet
│   │   ├── TreeSet
├── AbstractCollection


(II) Is the following code valid? Why or why not?


   List L = new Collection();
   L.add(56);

   System.out.println (L);


Answer:

No, the code is not valid. The `Collection` is an interface and cannot be instantiated. Instead, you should instantiate a concrete class that implements the `List` interface, such as `ArrayList` or `LinkedList`. For example:

    List L = new ArrayList();
    L.add(56);

    System.out.println(L);


    Additionally, upcasting is allowed, but downcasting is not permitted in java.

    Forexample:

    class A {}  
    class B extends A {}  

    A obj = new B();  // ✅ Valid (Upcasting)

    B obj = new A();  // ❌ Compilation Error (Downcasting)



